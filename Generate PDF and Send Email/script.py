#!/usr/bin/env python3

import json
import locale
import sys
import emails
import reports
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    most_popular_car = [data[0]["total_sales"], data[0]["car"]["car_model"]]
    most_popular_year = [0,0]
    years_dict= {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # handle max sales
        car_year = item["car"]["car_year"]
        car_model = item["car"]["car_model"]
        car_sales = item["total_sales"]
        if int(car_sales) > int(most_popular_car[0]):
            most_popular_car = [car_sales, car_model]
        # handle most popular car_year
        if car_year in years_dict:
            years_dict[car_year] += int(car_sales)
        else:
            years_dict[car_year] = int(car_sales)
    for year in years_dict:
        if int(years_dict[year]) >  most_popular_year[1]:
            most_popular_year = [year, years_dict[year]]
    summary = [
    "The {} generated the most revenue: ${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),
    ]
    summary.append(f'The {most_popular_car[1]} had the most sales: {most_popular_car[0]}')
    summary.append(f'The most popular year was {most_popular_year[0]} with {most_popular_year[1]} sales.')
    return summary

def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    summary_string = ""
    for sentence in summary:
        summary_string += sentence + "<br/>"
    email_string = ""
    for sentence in summary:
        summary_string += sentence + "\n"

    # TODO: turn this into a PDF report
    reports.generate("/tmp/cars.pdf","Sales summary for last month", summary_string, cars_dict_to_table(data))
    # TODO: send the PDF report as an email attachment
    sender ="automation@example.com"
    receiver = "student-02-b077fb1e6df7@example.com"
    subject = "Sales summary for last month"
    body = email_string
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)

if __name__ == "__main__":
    main(sys.argv)

